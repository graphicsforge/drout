
const Drout = require("drout");

class Field extends Drout.React.Component {
  renderControl() {
    // render control widget for value
    // TODO iterate control plugins for object match?
    const inputType = typeof(this.props.value) === "boolean" ? "checkbox" : "input";
    return Drout.React.createElement(
      "input",
      {
        key: this.props.label,
        type: inputType,
        value: this.props.value,
        checked: this.props.value,
        onChange: this.props.onChange,
      },
    );
  }

  render() {
    // ignore reserved "component" field
    if (this.props.label === "component") return null;
    return Drout.React.createElement(
      "div",
      {key: this.props.label},
      [
        Drout.React.createElement("span", {key: this.props.label}, this.props.label),
        Drout.React.createElement("span", {key: 1}, this.renderControl()),
      ],
    );
  }
}

class Editor extends Drout.React.Component {
  constructor(props) {
    super(props);
    const defaults = Drout.getDefault(this.props.options.content);
    const currentOptions = Object.assign({}, defaults, this.props.options.content);
    this.state = {
      expanded: true,
      dirty: false,
      currentOptions,
    };
  }

  onChange(update) {
    this.setState((prevState) => {
      const currentOptions = Object.assign({}, prevState.currentOptions, update);
      return { currentOptions, dirty: true };
    });
  }

  save() {
    const xhr = new XMLHttpRequest();
    xhr.open("POST", "/drout-config-store", true);
    xhr.onreadystatechange = function() {
      if (this.readyState === XMLHttpRequest.DONE) {
        if (this.status !== 200) {
          alert(this.data);
        }
        alert(this.data);
      }
    }
    const formData = new FormData();
    Object.keys(this.state.currentOptions).forEach(key => {
      formData.append(key, this.state.currentOptions[key]);
    });
    xhr.send(formData);
    this.setState({ dirty: false });
  }

  render() {
    const controls = [];
    // field controls
    Object.keys(this.state.currentOptions).forEach((key) => {
      controls.push(Drout.React.createElement(
        Field,
        {
          key: key,
          label: key,
          value: this.state.currentOptions[key],
          onChange: (event) => {
            this.onChange({ [key]: event.target.value });
          }
        },
      ));
    });

    // save control
    controls.push(Drout.React.createElement(
      Field,
      {
        key: "Save",
        label: "Save",
        value: !this.state.dirty,
        onChange: (event) => {
          this.save();
        }
      },
    ));

    // toggle show/hide
    controls.push(Drout.React.createElement(
      "div",
      {
        key: "toggle-expand",
        className: "toggle-expand",
        onClick: () => {
          this.setState({ expanded: !this.state.expanded });
        },
      },
      this.state.expanded ? 'Close Controls' : 'Open Controls',
    ));

    return Drout.React.createElement("div", { key: "main" }, [
      Drout.render(this.state.currentOptions),
      Drout.React.createElement("div",
        {
          key: "drout-editor",
          className: `drout-editor ${this.state.expanded?'expanded':null}`,
        },
        controls,
      ),
    ]);
  }
}

class DroutEditorWysiwyg {
  static render(options) {
    const editor = Drout.React.createElement(Editor,
      {
        key: "drout-editor",
        className: "drout-editor",
        options: options,
      },
    );

    const styles = Drout.React.createElement(
      "style",
      {
        key: "style",
        dangerouslySetInnerHTML: { __html: `
          .drout-editor {
            width: 245px;
            position: absolute;
            color: #fff;
            background: #1a1a1a;
            top: 0px;
            right: 20px;
          }
          .drout-editor > div {
          }
          .drout-editor .toggle-expand {
            text-align: center;
            cursor: pointer;
            background: #000;
          }
          .drout-editor > div:not(.toggle-expand) {
            height: 0;
            overflow: hidden;
            transition: height 0.1s, padding 0.1s;
          }
          .drout-editor.expanded > div:not(.toggle-expand) {
            padding: 0 5px;
            border-bottom: 1px solid #2c2c2c;
            height: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
        `},
      },
    );

    return Drout.React.createElement("div", {}, [
      editor,
      styles,
    ]);
  }
}

module.exports = DroutEditorWysiwyg;
