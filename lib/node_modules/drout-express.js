
require("node-jsx-babel").install();
const util = require("util");

const React = require("drout").React;
const Formidable = require("formidable");
const browserifyString = require("browserify-string");
const DroutReactPage = require("drout-react-page");
const ReactDOMServer = require("react-dom/server");

module.exports = {
  render: (options) => {
    return ((request, response, next) => {
      if (/^\/drout\.js$/.test(request.path)) {
        // we want to build a static script file for the client
        // handle options as if drout-path were the specified component
        const bundleOptions = Object.assign(options, {
          componentId: "drout-path",
        });
        // we need to do the bundling here, so that the bundler can use
        // the require path here, which includes drout and our parent project
        const transformedContent = JSON.stringify(bundleOptions).replace(/"componentId":"([^"]*)"/g, 'componentId: "$1", component: require("$1")');
        const clientCode = `
          Drout = require("drout");
          React = Drout.React;
          ReactDom = Drout.ReactDom;
          const page = Drout.render(${transformedContent});
          Drout.ReactDom.hydrate(page, document.querySelector(".drout"));
        `;
        return browserifyString(clientCode, { paths: module.paths })
          .bundle()
          .pipe(response);
      }
      // handle paths
      for (const path in options.paths) {
        const expression = new RegExp(path);
        if (!expression.test(request.path)) continue;
        const pageOptions = Object.assign({}, options.paths[path]);
        if (options.inherited) {
          pageOptions.inherited = Object.assign({}, options.inherited, pageOptions.inherited);
        }
        const page = React.createElement(DroutReactPage, pageOptions);
        return response.end(`
          <!doctype html>
          ${ReactDOMServer.renderToString(page)}
        `);
      }
      if (request.path === '/drout-config-store') {
        const form = new Formidable.IncomingForm();
        return form.parse(request, function(err, fields, files) {
          request.fields = fields;
          request.files = files;
          // TODO only on POST?
          if (options.inherited && options.inherited["drout-config-store"]) {
            options.inherited["drout-config-store"](request.fields);
            return response.end(JSON.stringify({}));
          }
        });
      }
      next();
    });
  },
};
